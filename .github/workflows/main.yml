# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # sets up .NET Core SDK 3.1
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      # publishes Blazor project to the release-folder
      - name: Publish .NET Core Project
        run: dotnet publish qr-code-blazor.csproj -c Release -o release --nologo
      
      # changes the base-tag in index.html from '/' to 'qr-code-blazor' to match GitHub Pages repository subdirectory
      - name: Change base-tag in index.html from / to qr-code-blazor
        run: sed -i 's/<base href="\/" \/>/<base href="\/qr-code-blazor\/" \/>/g' release/wwwroot/index.html
        
      # fix service-worker-assets.js hashes
      - name: Fix service-worker-assets.js hashes
        working-directory: release/wwwroot
        run: |
          jsFile=$(<service-worker-assets.js)
          # remove JavaScript from contents so it can be interpreted as JSON
          json=$(echo "$jsFile" | sed "s/self.assetsManifest = //g" | sed "s/;//g")
          # grab the assets JSON array
          assets=$(echo "$json" | jq '.assets[]' -c)
          for asset in $assets
          do
            oldHash=$(echo "$asset" | jq '.hash')
            #remove leading and trailing quotes
            oldHash="${oldHash:1:-1}"
            path=$(echo "$asset" | jq '.url')
            #remove leading and trailing quotes
            path="${path:1:-1}"
            newHash="sha256-$(openssl dgst -sha256 -binary $path | openssl base64 -A)"

            if [ $oldHash != $newHash ]; then
              # escape slashes for json
              oldHash=$(echo "$oldHash" | sed 's;/;\\/;g')
              newHash=$(echo "$newHash" | sed 's;/;\\/;g')
              echo "Updating hash for $path from $oldHash to $newHash"
              # escape slashes second time for sed
              oldHash=$(echo "$oldHash" | sed 's;/;\\/;g')
              jsFile=$(echo -n "$jsFile" | sed "s;$oldHash;$newHash;g")
            fi
          done

          echo -n "$jsFile" > service-worker-assets.js
        
     # add .nojekyll file to tell GitHub pages to not treat this as a Jekyll project. (Allow files and folders starting with an underscore)
      - name: Add .nojekyll file
        run: touch release/wwwroot/.nojekyll
      
      # third party deploy
      - name: Commit wwwroot to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: release/wwwroot
      
